# .github/workflows/reusable-go-quality.yml
name: Reusable Go Quality Workflow

on:
  workflow_call:
    inputs:
      go-version:
        required: false
        type: string
        default: stable
      run-tests:
        required: false
        type: boolean
        default: true
      run-lint:
        required: false
        type: boolean
        default: true
      run-vulncheck:
        required: false
        type: boolean
        default: true

jobs:
  setup:
    uses: ./.github/workflows/reusable-go-setup.yml
    with:
      go-version: ${{ inputs.go-version }}

  lint:
    needs: setup
    if: ${{ inputs.run-lint == true }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ inputs.go-version }}
          cache: true

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v7
        with:
          version: latest
          args: --verbose

  fmt:
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ inputs.go-version }}
          cache: true

      - name: gofmt check
        run: |
          fmt_out=$(gofmt -l .)
          if [ -n "$fmt_out" ]; then
            echo "Files not properly formatted:"
            echo "$fmt_out"
            exit 1
          fi

  vulncheck:
    if: ${{ inputs.run-vulncheck == true }}
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ inputs.go-version }}
          cache: true

      - name: govulncheck
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck -show verbose ./...

  test:
    if: ${{ inputs.run-tests == true }}
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ inputs.go-version }}
          cache: true

      - name: Run tests with coverage
        run: |
          go test -race -p=1 -coverprofile=coverage.out ./...
          go tool cover -func=coverage.out
          go tool cover -html=coverage.out -o coverage.html

      - name: Extract coverage percentage
        id: coverage
        run: |
          percent=$(go tool cover -func=coverage.out | grep total: | awk '{print substr($3, 1, length($3)-1)}')
          echo "coverage=$percent" >> $GITHUB_OUTPUT
          echo "## Coverage report" >> $GITHUB_STEP_SUMMARY
          go tool cover -func=coverage.out >> $GITHUB_STEP_SUMMARY

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.*
